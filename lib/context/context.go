package context

import (
	"os"
	"strings"
	"sync"


	"github.com/krishpranav/exploit-framework/lib/util/config"
	"github.com/krishpranav/exploit-framework/lib/util/message"
	"github.com/krishpranav/exploit-framework/lib/util/ui"
	"github.com/krishpranav/exploit-framework/readline"

	"github.com/fatih/color"
	"github.com/gin-gonic/gin"
	"gopkg.in/olahol/melody.v1"
)

type Context struct {
	Servers         map[string](*TCPServer)
	NotifyWebSocket *melody.Melody
	Current         *TCPClient
	CurrentTermite  *TermiteClient
	CommandPrompt   string
	RLInstance      *readline.Instance
	Interacting     *sync.Mutex
	// Set later in platypus.go
	Distributor *Distributor
	RESTful     *gin.Engine
	Config      *config.Config
}

var Ctx *Context

func CreateContext() {
	if Ctx == nil {
		Ctx = &Context{
			Servers:         make(map[string](*TCPServer)),
			NotifyWebSocket: nil,
			Current:         nil,
			CurrentTermite:  nil,
			CommandPrompt:   color.CyanString("Â» "),
			RLInstance:      nil,
			Interacting:     new(sync.Mutex),
		}
	}
	// Signal Handler
	Signal()
	// Register gob
	message.RegisterGob()
}