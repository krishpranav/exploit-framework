package context

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net"
	"os"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/krishpranav/exploit-framework/lib/util/compiler"
	"github.com/krishpranav/exploit-framework/lib/util/hash"
	"github.com/krishpranav/exploit-framework/lib/util/log"
	oss "github.com/krishpranav/exploit-framework/lib/util/os"
	"github.com/krishpranav/exploit-framework/lib/util/str"
	humanize "github.com/dustin/go-humanize"
	"github.com/jedib0t/go-pretty/table"
	"github.com/vbauerster/mpb/v6"
	"github.com/vbauerster/mpb/v6/decor"
	"golang.org/x/term"
)

type TCPClient struct {
	conn              net.Conn
	interactive       bool
	ptyEstablished    bool
	GroupDispatch     bool                `json:"group_dispatch"`
	Hash              string              `json:"hash"`
	Host              string              `json:"host"`
	Port              uint16              `json:"port"`
	Alias             string              `json:"alias"`
	User              string              `json:"user"`
	OS                oss.OperatingSystem `json:"os"`
	NetworkInterfaces map[string]string   `json:"network_interfaces"`
	Python2           string              `json:"python2"`
	Python3           string              `json:"python3"`
	TimeStamp         time.Time           `json:"timestamp"`
	echoEnabled       bool
	server            *TCPServer
	readLock          *sync.Mutex
	writeLock         *sync.Mutex
	interacting       *sync.Mutex
	mature            bool
}

func CreateTCPClient(conn net.Conn, server *TCPServer) *TCPClient {
	host := strings.Split(conn.RemoteAddr().String(), ":")[0]
	port, _ := strconv.Atoi(strings.Split(conn.RemoteAddr().String(), ":")[1])
	return &TCPClient{
		TimeStamp:         time.Now(),
		echoEnabled:       false,
		server:            server,
		conn:              conn,
		interactive:       false,
		ptyEstablished:    false,
		GroupDispatch:     false,
		Hash:              "",
		Host:              host,
		Port:              uint16(port),
		Alias:             "",
		NetworkInterfaces: map[string]string{},
		OS:                oss.Unknown,
		Python2:           "",
		Python3:           "",
		User:              "",
		readLock:          new(sync.Mutex),
		writeLock:         new(sync.Mutex),
		interacting:       new(sync.Mutex),
		mature:            false,
	}
}

func (c *TCPClient) Close() {
	log.Debug("Closing client: %s", c.FullDesc())
	c.conn.Close()
}

func (c *TCPClient) GetConnString() string {
	return c.conn.RemoteAddr().String()
}

func (c *TCPClient) GetConnString() string {
	return c.server.hashFormat
}