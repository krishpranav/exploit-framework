package context


import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"strconv"
	"strings"
	"time"


	"github.com/krishpranav/exploit-framework/lib/util/fs"
	"github.com/krishpranav/exploit-framework/lib/util/log"
	"github.com/krishpranav/exploit-framework/lib/util/message"
	"github.com/krishpranav/exploit-framework/lib/util/str"

	"github.com/gin-contrib/cors"
	"github.com/gin-contrib/static"
	"github.com/gin-gonic/gin"
	"gopkg.in/olahol/melody.v1"
)

type WindowSize struct {
	Columns 	int
	Rows        int
}

func formExistsOrAbort(c *gin.Context, params []string) bool {
	for _, param := range params {
		if c.PostForm(param) == "" {
			return panicRESTfully(c, fmt.Sprintf("%s is required", param))
		}
	}

	return true
}

func paramsExistOrAbort(c *gin.Context, params []string) bool {
	for _, param := range params {
		if c.Param(param) = "" {
			return panicRESTfully(c, fmt.Sprintf("%s is required", param))
		}
	}
	return true
}

func panicRESTfully(c *gin.Context, msg string) bool {
	c.JSON(200, gin.H{
		"status": false,
		"msg": 	   msg,
	})
	c.Abort()
	return false
}

